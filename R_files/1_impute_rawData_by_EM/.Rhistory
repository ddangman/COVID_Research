library(openxlsx)
# Define the URLs
covid_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/covid_EM_imputed.rds"
healthy_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/healthy_EM_imputed.rds"
# Read RDS directly from URL without saving as a file
covid_imputed <- readRDS(gzcon(url(covid_url, "rb")))
healthy_imputed <- readRDS(gzcon(url(healthy_url, "rb")))
# Import patient information from Excel file
pt_info_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/main/data/dt.info_edited.xlsx"
pt_info_df <- read.xlsx(pt_info_url, sheet = 1)
View(covid_imputed)
View(covid_imputed)
View(healthy_imputed)
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
load("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
View(covid_imputed_parallel)
# Load necessary libraries
library(norm)
install.packages("norm")
# Load necessary libraries
library(norm)
library(parallel)
library(foreach)
library(doParallel)
# Detect available CPU cores and set up parallel backend
num_cores <- detectCores() - 1  # Leave one core free
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Function to split dataset into smaller chunks (column-wise)
split_dataframe <- function(df, num_splits) {
col_groups <- split(colnames(df), cut(seq_along(colnames(df)), num_splits, labels = FALSE))
return(lapply(col_groups, function(cols) df[, cols, drop = FALSE]))
}
# Function to impute missing values using EM in parallel
impute_missing_values_em_parallel <- function(df, num_splits = num_cores) {
df <- as.data.frame(lapply(df, as.numeric))  # Ensure numeric format
# Split the dataset into column subsets for parallel processing
df_splits <- split_dataframe(df, num_splits)
# Run EM in parallel for each subset
imputed_splits <- foreach(chunk = df_splits, .combine = cbind, .packages = "norm") %dopar% {
incomplete_data <- as.matrix(chunk)  # Convert to matrix for EM
# Step 1: Initialize EM algorithm
s <- prelim.norm(incomplete_data)  # Preprocess missing data
# Step 2: Run the EM algorithm
theta <- em.norm(s)  # Compute MLE estimates using EM
# Step 3: Impute missing values using EM estimates
imputed_chunk <- imp.norm(s, theta)
return(as.data.frame(imputed_chunk))  # Convert back to data frame
}
return(imputed_splits)  # Return merged dataset
}
# Apply parallel EM imputation on covid_transposed
covid_EM <- impute_missing_values_em_parallel(covid_transposed)
# Load necessary libraries
library(norm)
library(parallel)
library(foreach)
library(doParallel)
# Detect available CPU cores and set up parallel backend
num_cores <- detectCores() - 1  # Leave one core free
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Function to filter out problematic columns
filter_valid_columns <- function(df) {
df <- as.data.frame(lapply(df, as.numeric))  # Ensure numeric format
# Remove columns that are entirely NA
df <- df[, colSums(!is.na(df)) > 0]
# Remove columns with zero variance (constant values)
df <- df[, apply(df, 2, function(col) length(unique(na.omit(col))) > 1)]
return(df)
}
# Function to split dataset into smaller chunks (column-wise)
split_dataframe <- function(df, num_splits) {
col_groups <- split(colnames(df), cut(seq_along(colnames(df)), num_splits, labels = FALSE))
return(lapply(col_groups, function(cols) df[, cols, drop = FALSE]))
}
# Function to impute missing values using EM in parallel
impute_missing_values_em_parallel <- function(df, num_splits = num_cores) {
df <- filter_valid_columns(df)  # Filter problematic columns
# Split the dataset into column subsets for parallel processing
df_splits <- split_dataframe(df, num_splits)
# Run EM in parallel for each subset
imputed_splits <- foreach(chunk = df_splits, .combine = cbind, .packages = "norm") %dopar% {
incomplete_data <- as.matrix(chunk)  # Convert to matrix for EM
# Check if the chunk has enough valid data for EM
if (any(is.na(incomplete_data)) & ncol(incomplete_data) > 1) {
# Step 1: Initialize EM algorithm
s <- prelim.norm(incomplete_data)  # Preprocess missing data
# Step 2: Run the EM algorithm
theta <- em.norm(s)  # Compute MLE estimates using EM
# Step 3: Impute missing values using EM estimates
imputed_chunk <- imp.norm(s, theta)
return(as.data.frame(imputed_chunk))  # Convert back to data frame
} else {
return(as.data.frame(chunk))  # Return unchanged if no missing values
}
}
return(imputed_splits)  # Return merged dataset
}
# Apply parallel EM imputation on covid_transposed
covid_imputed <- impute_missing_values_em_parallel(covid_transposed)
# Apply parallel EM imputation on healthy_transposed
healthy_imputed <- impute_missing_values_em_parallel(healthy_transposed)
load("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
# Load necessary libraries
library(norm)
library(parallel)
library(foreach)
library(doParallel)
# Detect available CPU cores and set up parallel backend
num_cores <- detectCores() - 1  # Leave one core free
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Function to filter out problematic columns
filter_valid_columns <- function(df) {
df <- as.data.frame(lapply(df, as.numeric))  # Ensure numeric format
# Remove columns that are entirely NA
df <- df[, colSums(!is.na(df)) > 0, drop = FALSE]
# Remove columns with zero variance (constant values)
df <- df[, apply(df, 2, function(col) length(unique(na.omit(col))) > 1), drop = FALSE]
return(df)
}
# Function to split dataset into smaller chunks (column-wise)
split_dataframe <- function(df, num_splits) {
col_groups <- split(colnames(df), cut(seq_along(colnames(df)), num_splits, labels = FALSE))
return(lapply(col_groups, function(cols) df[, cols, drop = FALSE]))
}
# Function to impute missing values using EM in parallel
impute_missing_values_em_parallel <- function(df, num_splits = num_cores) {
df <- filter_valid_columns(df)  # Filter problematic columns
# Ensure there are at least two columns left, otherwise return unchanged
if (ncol(df) < 2) {
warning("Dataset has too few valid columns for EM imputation.")
return(df)
}
# Split the dataset into column subsets for parallel processing
df_splits <- split_dataframe(df, num_splits)
# Run EM in parallel for each subset
imputed_splits <- foreach(chunk = df_splits, .combine = cbind, .packages = "norm", .errorhandling = "pass") %dopar% {
incomplete_data <- as.matrix(chunk)  # Convert to matrix for EM
# Check if the chunk has at least two valid columns for EM
if (any(is.na(incomplete_data)) & ncol(incomplete_data) > 1) {
# Step 1: Initialize EM algorithm
s <- prelim.norm(incomplete_data)  # Preprocess missing data
# Step 2: Run the EM algorithm
theta <- em.norm(s)  # Compute MLE estimates using EM
# Step 3: Impute missing values using EM estimates
imputed_chunk <- imp.norm(s, theta)
return(as.data.frame(imputed_chunk))  # Convert back to data frame
} else {
return(as.data.frame(chunk))  # Return unchanged if no missing values
}
}
return(imputed_splits)  # Return merged dataset
}
# Apply parallel EM imputation on covid_transposed
covid_EM <- impute_missing_values_em_parallel(covid_transposed)
# Apply parallel EM imputation on healthy_transposed
healthy_EM <- impute_missing_values_em_parallel(healthy_transposed)
# Stop parallel cluster
stopCluster(cl)
# save single data frame
saveRDS(covid_EM, "covid_EM_imputed.rds")
saveRDS(healthy_EM, "healthy_EM_imputed.rds")
View(covid_EM)
View(covid_EM)
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
library(openxlsx)
# Define the URLs
covid_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/covid_EM_imputed.rds"
healthy_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/healthy_EM_imputed.rds"
# Read RDS directly from URL without saving as a file
covid_imputed <- readRDS(gzcon(url(covid_url, "rb")))
healthy_imputed <- readRDS(gzcon(url(healthy_url, "rb")))
# Import patient information from Excel file
pt_info_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/main/data/dt.info_edited.xlsx"
pt_info_df <- read.xlsx(pt_info_url, sheet = 1)
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
library(openxlsx)
# Define the URLs
covid_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/covid_EM_imputed.rds"
healthy_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/healthy_EM_imputed.rds"
# Read RDS directly from URL without saving as a file
covid_imputed <- readRDS(gzcon(url(covid_url, "rb")))
healthy_imputed <- readRDS(gzcon(url(healthy_url, "rb")))
# Import patient information from Excel file
pt_info_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/main/data/dt.info_edited.xlsx"
pt_info_df <- read.xlsx(pt_info_url, sheet = 1)
load("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
# Function to replace NA with the smallest value in the column
replace_na_with_min <- function(df) {
df <- as.data.frame(lapply(df, function(col) {
col <- as.numeric(col)  # Ensure numeric format
min_val <- min(col, na.rm = TRUE)  # Find the smallest value (ignoring NA)
col[is.na(col)] <- min_val  # Replace NA with the smallest value
return(col)
}))
return(df)
}
# Apply NA replacement on imputed datasets
covid_min <- replace_na_with_min(covid_transposed)
healthy_min <- replace_na_with_min(healthy_transposed)
# Subtract while handling NA values
covid_diff <- as.data.frame(mapply(function(x, y) ifelse(is.na(x) | is.na(y), x, x - y), covid_min, covid_imputed))
healthy_diff <- as.data.frame(mapply(function(x, y) ifelse(is.na(x) | is.na(y), x, x - y), healthy_min, healthy_imputed))
View(covid_diff)
View(covid_diff)
View(healthy_diff)
View(healthy_diff)
save.image("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
library(openxlsx)
# Define the URLs
covid_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/covid_MICE_imputed.rds"
healthy_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/healthy_MICE_imputed.rds"
# Read RDS directly from URL without saving as a file
covid_imputed <- readRDS(gzcon(url(covid_url, "rb")))
healthy_imputed <- readRDS(gzcon(url(healthy_url, "rb")))
# Import patient information from Excel file
pt_info_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/main/data/dt.info_edited.xlsx"
pt_info_df <- read.xlsx(pt_info_url, sheet = 1)
load("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
View(covid_diff)
View(covid_diff)
View(covid_transposed)
View(covid_transposed)
View(covid_imputed)
View(covid_imputed)
load("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
library(readr)
library(openxlsx)
# Import raw data from github
covid_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/refs/heads/main/data/dt.COVID_TCR.vjGene.p.csv"
covid_df <- read_csv(covid_url)
pt_info_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/refs/heads/main/data/dt.info_edited.xlsx"
pt_info_df <- read.xlsx(pt_info_url, sheet = 1)
healthy_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/refs/heads/main/data/dt.HD_TCR.vjGene.p.csv"
healthy_df <- read_csv(healthy_url)
# Transpose the dataset
covid_transposed <- t(covid_df)
healthy_transposed <- t(healthy_df)
# Convert to data frame
covid_transposed <- as.data.frame(covid_transposed, stringsAsFactors = FALSE)
healthy_transposed <- as.data.frame(healthy_transposed, stringsAsFactors = FALSE)
# Set first row as column names
colnames(covid_transposed) <- covid_transposed[1, ]
colnames(healthy_transposed) <- healthy_transposed[1, ]
# Remove the first row
covid_transposed <- covid_transposed[-1, ]
healthy_transposed <- healthy_transposed[-1, ]
# Remove "TRB" from column names
colnames(covid_transposed) <- gsub("TRB", "", colnames(covid_transposed))
colnames(healthy_transposed) <- gsub("TRB", "", colnames(healthy_transposed))
# Strip "TRB-Pt-" from row names
rownames(covid_transposed) <- gsub("TRB-Pt-", "", rownames(covid_transposed))
# Identify unique columns in covid_transposed
covid_unique_cols <- setdiff(colnames(covid_transposed), colnames(healthy_transposed))
# Print the result
print(covid_unique_cols)
save.image("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
positive_in_diff_but_na_in_transposed <- covid_diff > 0 & is.na(covid_transposed)
View(positive_in_diff_but_na_in_transposed)
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
pos_diff_and_NA_COVID <- covid_diff > 0 & is.na(covid_transposed)
pos_diff_and_NA_HD <- healthy_diff > 0 & is.na(healthy_transposed)
View(healthy_df)
View(pos_diff_and_NA_HD)
neg_diff_and_NA_COVID <- covid_diff < 0 & is.na(covid_transposed)
neg_diff_and_NA_HD <- healthy_diff < 0 & is.na(healthy_transposed)
View(neg_diff_and_NA_COVID)
View(neg_diff_and_NA_COVID)
neg_diff_and_NA_COVID <- (covid_diff < 0 & is.na(covid_transposed)) | covid_diff==0
neg_diff_and_NA_HD <- (healthy_diff < 0 & is.na(healthy_transposed)) | healthy_diff==0
neg_diff_and_NA_COVID <- (covid_diff > 0 & is.na(covid_transposed)) | covid_diff==0
neg_diff_and_NA_HD <- (healthy_diff > 0 & is.na(healthy_transposed)) | healthy_diff==0
neg_diff_and_NA_COVID <- (covid_diff > 0 & is.na(covid_transposed)) | covid_diff==0
neg_diff_and_NA_HD <- (healthy_diff > 0 & is.na(healthy_transposed)) | healthy_diff==0
neg_diff_and_NA_COVID <- (covid_diff < 0 & is.na(covid_transposed)) | covid_diff==0
neg_diff_and_NA_HD <- (healthy_diff < 0 & is.na(healthy_transposed)) | healthy_diff==0
View(neg_diff_and_NA_HD)
View(neg_diff_and_NA_HD)
View(healthy_transposed)
View(healthy_imputed)
View(healthy_imputed)
View(covid_diff)
View(covid_diff)
View(neg_diff_and_NA_COVID)
View(pos_diff_and_NA_COVID)
View(neg_diff_and_NA_HD)
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
neg_diff_and_NA_COVID <- !is.na(covid_transposed)
#neg_diff_and_NA_HD <- (healthy_diff < 0 & is.na(healthy_transposed)) | healthy_diff==0
View(covid_transposed)
neg_diff_and_NA_COVID <- is.na(covid_transposed)
#neg_diff_and_NA_HD <- (healthy_diff < 0 & is.na(healthy_transposed)) | healthy_diff==0
View(covid_diff)
View(covid_imputed)
View(healthy_imputed)
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
pos_diff_and_NA_COVID <- covid_diff > 0 & is.na(covid_imputed)
pos_diff_and_NA_HD <- healthy_diff > 0 & is.na(healthy_imputed)
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
pos_diff_and_NA_COVID <- covid_diff < 0 & is.na(covid_imputed)
pos_diff_and_NA_HD <- healthy_diff < 0 & is.na(healthy_imputed)
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
pos_diff_and_NA_COVID <- covid_diff < 0 & is.na(covid_imputed)
pos_diff_and_NA_HD <- healthy_diff < 0 & is.na(healthy_imputed)
View(pos_diff_and_NA_HD)
View(pos_diff_and_NA_HD)
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
imputed_above_col_min_COVID <- covid_diff < 0 & is.na(covid_imputed)
imputed_above_col_min_HD <- healthy_diff < 0 & is.na(healthy_imputed)
View(imputed_above_col_min_COVID)
View(imputed_above_col_min_COVID)
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
imputed_above_col_min_COVID <- covid_diff < 0 & is.na(covid_imputed)
print(sum(imputed_above_col_min_COVID))
imputed_above_col_min_HD <- healthy_diff < 0 & is.na(healthy_imputed)
print(sum(imputed_above_col_min_HD))
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
imputed_above_col_min_COVID <- covid_diff > 0 & !is.na(covid_imputed)
print(sum(imputed_above_col_min_COVID))
imputed_above_col_min_HD <- healthy_diff > 0 & !is.na(healthy_imputed)
print(sum(imputed_above_col_min_HD))
save.image("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
library(openxlsx)
# Define the URLs
covid_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/covid_MICE_imputed.rds"
healthy_url <- "https://github.com/ddangman/COVID_Research/raw/refs/heads/main/R_files/1_impute_rawData_by_EM/healthy_MICE_imputed.rds"
# Read RDS directly from URL without saving as a file
covid_imputed <- readRDS(gzcon(url(covid_url, "rb")))
healthy_imputed <- readRDS(gzcon(url(healthy_url, "rb")))
# Import patient information from Excel file
pt_info_url <- "https://raw.githubusercontent.com/ddangman/COVID_Research/main/data/dt.info_edited.xlsx"
pt_info_df <- read.xlsx(pt_info_url, sheet = 1)
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
cat(sum(covid_diff > 0), " ", !is.na(covid_imputed))
cat(sum(covid_diff > 0), " ", sum(!is.na(covid_imputed)))
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
imputed_above_col_min_COVID <- covid_diff > 0 & is.na(covid_imputed)
print(sum(imputed_above_col_min_COVID))
imputed_above_col_min_HD <- healthy_diff > 0 & is.na(healthy_imputed)
print(sum(imputed_above_col_min_HD))
cat(sum(covid_diff > 0), " ", sum(is.na(covid_imputed)))
cat(sum(covid_diff > 0), " ", sum(is.na(covid_imputed)))
cat(sum(healthy_diff > 0), " ", sum(is.na(healthy_imputed)))
cat(sum(covid_diff > 0), " ", sum(is.na(covid_imputed)), "\n")
cat(sum(healthy_diff > 0), " ", sum(is.na(healthy_imputed)))
cat(sum(covid_diff > 0), "==", sum(is.na(covid_imputed)), "\n")
cat(sum(healthy_diff > 0), "==", sum(is.na(healthy_imputed)))
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
imputed_above_col_min_COVID <- covid_diff > 0 & is.na(covid_imputed)
intersect1 <- sum(imputed_above_col_min_COVID)
print(intersect1)
imputed_above_col_min_HD <- healthy_diff > 0 & is.na(healthy_imputed)
intersect2 <- sum(imputed_above_col_min_HD)
print(intersect2)
cat(intersect1, "==", sum(covid_diff > 0), "==", sum(is.na(covid_imputed)), "\n")
cat(intersect2, "==", sum(healthy_diff > 0), "==", sum(is.na(healthy_imputed)))
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < 0) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min1+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < 0) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff <= 0) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff <= 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < 0) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < 1e-6) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < -1e-6) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < 1e-6) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < 0) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < -1e-10) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
knitr::opts_chunk$set(echo = TRUE) # enables Knit code display
knitr::opts_chunk$set(warning = FALSE, message = FALSE) # disables Knit warning
covid_diff > 0 & is.na(covid_imputed)
sum(covid_diff > 0 & is.na(covid_imputed))
sum(covid_diff == 0 & is.na(covid_imputed))
sum(covid_diff == 0 & is.na(covid_transposed))
sum(covid_diff == 0 & is.na(covid_transposed))
sum(healthy_diff == 0 & is.na(healthy_transposed))
imputed_as_min1 <- sum(covid_diff == 0 & is.na(covid_transposed))
imputed_as_min1
imputed_as_min2 <- sum(healthy_diff == 0 & is.na(healthy_transposed))
imputed_as_min2
cat(NA_count1, "==", lt_min1+no_impute1+imputed_as_min1, "=", lt_min1, "+", no_impute1, "+", imputed_as_min1,"\n")
cat(NA_count2, "==", lt_min2+no_impute2+imputed_as_min2, "=", lt_min2, "+", no_impute2, "+", imputed_as_min2)
load("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
# Function to replace NA with the smallest value in the column
replace_na_with_min <- function(df) {
df <- as.data.frame(lapply(df, function(col) {
col <- as.numeric(col)  # Ensure numeric format
min_val <- min(col, na.rm = TRUE)  # Find the smallest value (ignoring NA)
col[is.na(col)] <- min_val  # Replace NA with the smallest value
return(col)
}))
return(df)
}
# Apply NA replacement on imputed datasets
covid_min <- replace_na_with_min(covid_transposed)
healthy_min <- replace_na_with_min(healthy_transposed)
# Subtract while handling NA values
covid_diff <- as.data.frame(mapply(function(x, y) ifelse(is.na(x) | is.na(y), x, x - y), covid_min, covid_imputed))
healthy_diff <- as.data.frame(mapply(function(x, y) ifelse(is.na(x) | is.na(y), x, x - y), healthy_min, healthy_imputed))
# Create a logical matrix where:
# - TRUE means the value in covid_diff is positive AND the corresponding value in covid_transposed is NA
imputed_above_col_min_COVID <- covid_diff > 0 & is.na(covid_imputed)
intersect1 <- sum(imputed_above_col_min_COVID)
print(intersect1)
imputed_above_col_min_HD <- healthy_diff > 0 & is.na(healthy_imputed)
intersect2 <- sum(imputed_above_col_min_HD)
print(intersect2)
cat(intersect1, "==", sum(covid_diff > 0), "==", sum(is.na(covid_imputed)), "\n")
cat(intersect2, "==", sum(healthy_diff > 0), "==", sum(is.na(healthy_imputed)))
NA_count1 <- sum(is.na(covid_transposed))
lt_min1 <- sum(covid_diff < 0) # COVID imputed less than column's minimum
no_impute1 <- sum(is.na(covid_imputed)) # no MICE imputed COVID
cat(NA_count1, "==", lt_min1+no_impute1, "=", lt_min1, "+", no_impute1, "\n")
NA_count2 <- sum(is.na(healthy_transposed))
lt_min2 <- sum(healthy_diff < 0) # HD imputed less than column's minimum
no_impute2 <- sum(is.na(healthy_imputed)) # no MICE impute Healthy Donor
cat(NA_count2, "==", lt_min2+no_impute2, "=", lt_min2, "+", no_impute2)
imputed_as_min1 <- sum(covid_diff == 0 & is.na(covid_transposed))
imputed_as_min1
imputed_as_min2 <- sum(healthy_diff == 0 & is.na(healthy_transposed))
imputed_as_min2
cat(NA_count1, "==", lt_min1+no_impute1+imputed_as_min1, "=", lt_min1, "+", no_impute1, "+", imputed_as_min1,"\n")
cat(NA_count2, "==", lt_min2+no_impute2+imputed_as_min2, "=", lt_min2, "+", no_impute2, "+", imputed_as_min2)
save.image("E:/Documents2TBm2/StatisticDocuments/BiomedicalResearch/COVID_Research/R_files/1_impute_rawData_by_EM/environment1.RData")
